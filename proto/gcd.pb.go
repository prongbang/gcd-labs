// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gcd.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GCDRequest struct {
	A                    uint64   `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B                    uint64   `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GCDRequest) Reset()         { *m = GCDRequest{} }
func (m *GCDRequest) String() string { return proto.CompactTextString(m) }
func (*GCDRequest) ProtoMessage()    {}
func (*GCDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gcd_9c5d63e5c14c73b9, []int{0}
}
func (m *GCDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GCDRequest.Unmarshal(m, b)
}
func (m *GCDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GCDRequest.Marshal(b, m, deterministic)
}
func (dst *GCDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCDRequest.Merge(dst, src)
}
func (m *GCDRequest) XXX_Size() int {
	return xxx_messageInfo_GCDRequest.Size(m)
}
func (m *GCDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GCDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GCDRequest proto.InternalMessageInfo

func (m *GCDRequest) GetA() uint64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *GCDRequest) GetB() uint64 {
	if m != nil {
		return m.B
	}
	return 0
}

type GCDResponse struct {
	Result               uint64   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GCDResponse) Reset()         { *m = GCDResponse{} }
func (m *GCDResponse) String() string { return proto.CompactTextString(m) }
func (*GCDResponse) ProtoMessage()    {}
func (*GCDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_gcd_9c5d63e5c14c73b9, []int{1}
}
func (m *GCDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GCDResponse.Unmarshal(m, b)
}
func (m *GCDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GCDResponse.Marshal(b, m, deterministic)
}
func (dst *GCDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCDResponse.Merge(dst, src)
}
func (m *GCDResponse) XXX_Size() int {
	return xxx_messageInfo_GCDResponse.Size(m)
}
func (m *GCDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GCDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GCDResponse proto.InternalMessageInfo

func (m *GCDResponse) GetResult() uint64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*GCDRequest)(nil), "proto.GCDRequest")
	proto.RegisterType((*GCDResponse)(nil), "proto.GCDResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GCDService service

type GCDServiceClient interface {
	Computer(ctx context.Context, in *GCDRequest, opts ...grpc.CallOption) (*GCDResponse, error)
}

type gCDServiceClient struct {
	cc *grpc.ClientConn
}

func NewGCDServiceClient(cc *grpc.ClientConn) GCDServiceClient {
	return &gCDServiceClient{cc}
}

func (c *gCDServiceClient) Computer(ctx context.Context, in *GCDRequest, opts ...grpc.CallOption) (*GCDResponse, error) {
	out := new(GCDResponse)
	err := grpc.Invoke(ctx, "/proto.GCDService/Computer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GCDService service

type GCDServiceServer interface {
	Computer(context.Context, *GCDRequest) (*GCDResponse, error)
}

func RegisterGCDServiceServer(s *grpc.Server, srv GCDServiceServer) {
	s.RegisterService(&_GCDService_serviceDesc, srv)
}

func _GCDService_Computer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GCDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCDServiceServer).Computer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GCDService/Computer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCDServiceServer).Computer(ctx, req.(*GCDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GCDService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GCDService",
	HandlerType: (*GCDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Computer",
			Handler:    _GCDService_Computer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcd.proto",
}

func init() { proto.RegisterFile("gcd.proto", fileDescriptor_gcd_9c5d63e5c14c73b9) }

var fileDescriptor_gcd_9c5d63e5c14c73b9 = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x4f, 0x4e, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x1a, 0x5c, 0x5c, 0xee, 0xce, 0x2e,
	0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x3c, 0x5c, 0x8c, 0x89, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x2c, 0x41, 0x8c, 0x89, 0x20, 0x5e, 0x92, 0x04, 0x13, 0x84, 0x97, 0xa4, 0xa4, 0xca, 0xc5,
	0x0d, 0x56, 0x59, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x24, 0xc6, 0xc5, 0x56, 0x94, 0x5a, 0x5c,
	0x9a, 0x53, 0x02, 0x55, 0x0f, 0xe5, 0x19, 0x39, 0x82, 0x0d, 0x0c, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c,
	0x4e, 0x15, 0x32, 0xe6, 0xe2, 0x70, 0xce, 0xcf, 0x2d, 0x28, 0x2d, 0x49, 0x2d, 0x12, 0x12, 0x84,
	0xd8, 0xac, 0x87, 0xb0, 0x4f, 0x4a, 0x08, 0x59, 0x08, 0x62, 0xb0, 0x12, 0x43, 0x12, 0x1b, 0x58,
	0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x81, 0x8e, 0xef, 0xae, 0x00, 0x00, 0x00,
}
